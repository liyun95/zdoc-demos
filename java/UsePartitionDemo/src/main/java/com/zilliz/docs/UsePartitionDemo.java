package com.zilliz.docs;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Lists;

import io.milvus.client.MilvusServiceClient;
import io.milvus.common.clientenum.ConsistencyLevelEnum;
import io.milvus.grpc.DataType;
import io.milvus.grpc.MutationResult;
import io.milvus.grpc.QueryResults;
import io.milvus.grpc.SearchResults;
import io.milvus.param.ConnectParam;
import io.milvus.param.IndexType;
import io.milvus.param.MetricType;
import io.milvus.param.R;
import io.milvus.param.RpcStatus;
import io.milvus.param.collection.*;
import io.milvus.param.dml.InsertParam;
import io.milvus.param.dml.QueryParam;
import io.milvus.param.dml.SearchParam;
import io.milvus.param.highlevel.dml.DeleteIdsParam;
import io.milvus.param.highlevel.dml.response.DeleteResponse;
import io.milvus.param.index.*;
import io.milvus.param.partition.*;
import io.milvus.response.QueryResultsWrapper;
import io.milvus.response.SearchResultsWrapper;

/**
 * Hello world!
 */
public final class UsePartitionDemo {
    private UsePartitionDemo() {
    }

    /**
     * Says hello to the world.
     * @param args The arguments of the program.
     */
    public static void main(String[] args) {
        String clusterEndpoint = "YOUR_CLUSTER_ENDPOINT";
        String token = "YOUR_CLUSTER_TOKEN";
        String collectionName = "medium_articles";
        String partitionName = "Q1_2020";
        String data_file = System.getProperty("user.dir") + "/medium_articles_2020_dpr.json";

        // 1. Connect to Zilliz Cloud cluster
        ConnectParam connectParam = ConnectParam.newBuilder()
            .withUri(clusterEndpoint)
            .withToken(token)
            .build();

        MilvusServiceClient client = new MilvusServiceClient(connectParam);

        System.out.println("Connected to Zilliz Cloud!");

        // Output:
        // Connected to Zilliz Cloud!





        // 2. Define fields

        FieldType id = FieldType.newBuilder()
            .withName("id")
            .withDataType(DataType.Int64)
            .withPrimaryKey(true)
            .withAutoID(false)
            .build();

        FieldType title = FieldType.newBuilder()
            .withName("title")
            .withDataType(DataType.VarChar)
            .withMaxLength(512)
            .build();

        FieldType title_vector = FieldType.newBuilder()
            .withName("title_vector")
            .withDataType(DataType.FloatVector)
            .withDimension(768)
            .build();

        FieldType link = FieldType.newBuilder()
            .withName("link")
            .withDataType(DataType.VarChar)
            .withMaxLength(512)
            .build();

        FieldType reading_time = FieldType.newBuilder()
            .withName("reading_time")
            .withDataType(DataType.Int64)
            .build();

        FieldType publication = FieldType.newBuilder()
            .withName("publication")
            .withDataType(DataType.VarChar)
            .withMaxLength(512)
            .build();

        FieldType claps = FieldType.newBuilder()
            .withName("claps")
            .withDataType(DataType.Int64)
            .build();

        FieldType responses = FieldType.newBuilder()
            .withName("responses")
            .withDataType(DataType.Int64)
            .build();

        // 3. Create collection

        CreateCollectionParam createCollectionParam = CreateCollectionParam.newBuilder()
            .withCollectionName("medium_articles")
            .withDescription("Schema of Medium articles")
            .addFieldType(id)
            .addFieldType(title)
            .addFieldType(title_vector)
            .addFieldType(link)
            .addFieldType(reading_time)
            .addFieldType(publication)
            .addFieldType(claps)
            .addFieldType(responses)
            .build();

        R<RpcStatus> collection = client.createCollection(createCollectionParam);

        if (collection.getException() != null) {
            System.err.println("Failed to create collection: " + collection.getException().getMessage());
            return;
        }

        System.out.println("Collection created!");

        // Output:
        // Collection created!





        // 4. Create index

        CreateIndexParam createIndexParam = CreateIndexParam.newBuilder()
            .withCollectionName(collectionName)
            .withFieldName("title_vector")
            .withIndexName("title_vector_index")
            .withIndexType(IndexType.AUTOINDEX)
            .withMetricType(MetricType.L2)
            .build();

        R<RpcStatus> res = client.createIndex(createIndexParam);

        if (res.getException() != null) {
            System.err.println("Failed to create index: " + res.getException().getMessage());
            return;
        }

        System.out.println("Index created!");

        // Output:
        // Index created!





        // 5. Load collection

        LoadCollectionParam loadCollectionParam = LoadCollectionParam.newBuilder()
            .withCollectionName(collectionName)
            .build();

        R<RpcStatus> loadCollectionRes = client.loadCollection(loadCollectionParam);

        if (loadCollectionRes.getException() != null) {
            System.err.println("Failed to load collection: " + loadCollectionRes.getException().getMessage());
            return;
        }

        System.out.println("Collection loaded!");

        // Output:
        // Collection loaded!





        // 6. Create a partition

        CreatePartitionParam createPartitionParam = CreatePartitionParam.newBuilder()
            .withCollectionName(collectionName)
            .withPartitionName(partitionName)
            .build();

        R<RpcStatus> response = client.createPartition(createPartitionParam);

        if (response.getStatus() != R.Status.Success.getCode()) {
            System.err.println(response.getMessage());
        }

        LoadPartitionsParam loadPartitionsParam = LoadPartitionsParam.newBuilder()
            .withCollectionName(collectionName)
            .withPartitionNames(Lists.newArrayList(partitionName))
            .build();

        R<RpcStatus> loadPartitionsRes = client.loadPartitions(loadPartitionsParam);

        if (loadPartitionsRes.getException() != null) {
            System.err.println("Failed to load partitions: " + loadPartitionsRes.getException().getMessage());
            return;
        }

        System.out.println("Partition created!");

        // Output:
        // Partition created!




        // 7. Check whether a partition exists

        HasPartitionParam param = HasPartitionParam.newBuilder()
            .withCollectionName(collectionName)
            // highlight-next-line
            .withPartitionName(partitionName)
            .build();

        R<Boolean> hasPartitionRes = client.hasPartition(param);
        
        if (response.getStatus() != R.Status.Success.getCode()) {
            System.err.println(response.getMessage());
        }

        System.out.println(hasPartitionRes.getData());

        // Output:
        // true





        // 8. Insert a single entity into a partition

        // You can prepare a row record like this:

        List<JSONObject> rows1 = new ArrayList<>();
        JSONObject row = new JSONObject();
        row.put("id", 0L);
        row.put("title", "The Reported Mortality Rate of Coronavirus Is Not Important");
        row.put("title_vector", Lists.newArrayList(0.041732933f, 0.013779674f, -0.027564144f, -0.013061441f, 0.009748648f, 0.00082446384f, -0.00071647146f, 0.048612226f, -0.04836573f, -0.04567751f, 0.018008126f, 0.0063936645f, -0.011913628f, 0.030776596f, -0.018274948f, 0.019929802f, 0.020547243f, 0.032735646f, -0.031652678f, -0.033816382f, -0.051087562f, -0.033748355f, 0.0039493158f, 0.009246126f, -0.060236514f, -0.017136049f, 0.028754413f, -0.008433934f, 0.011168004f, -0.012391256f, -0.011225835f, 0.031775184f, 0.002929508f, -0.007448661f, -0.005337719f, -0.010999258f, -0.01515909f, -0.005130484f, 0.0060212007f, 0.0034560722f, -0.022935811f, -0.04970116f, -0.0155887455f, 0.06627353f, -0.006052789f, -0.051570725f, -0.109865054f, 0.033205193f, 0.00041118253f, 0.0029823708f, 0.036160238f, -0.011256539f, 0.00023560718f, 0.058322437f, 0.022275906f, 0.015206677f, -0.02884609f, 0.0016338055f, 0.0049200393f, 0.014388571f, -0.0049061654f, -0.04664761f, -0.027454877f, 0.017526226f, -0.005100602f, 0.018090058f, 0.02700998f, 0.04031944f, -0.0097965f, -0.03674761f, -0.0043163053f, -0.023320708f, 0.012654851f, -0.014262311f, -0.008081833f, -0.018334744f, 0.0014025003f, -0.003053399f, -0.002636383f, -0.022398386f, -0.004725274f, 0.00036367847f, -0.012368711f, 0.0014739085f, 0.03450414f, 0.009684024f, 0.017912658f, 0.06594397f, 0.021381201f, 0.029343689f, -0.0069561847f, 0.026152428f, 0.04635037f, 0.014746184f, -0.002119602f, 0.034359712f, -0.013705124f, 0.010691518f, 0.04060854f, 0.013679299f, -0.018990282f, 0.035340093f, 0.007353945f, -0.035990074f, 0.013126987f, -0.032933377f, -0.001756877f, -0.0049658176f, -0.03380879f, -0.07024137f, -0.0130426735f, 0.010533265f, -0.023091802f, -0.004645729f, -0.03344451f, 0.04759929f, 0.025985204f, -0.040710885f, -0.016681142f, -0.024664842f, -0.025170377f, 0.08839205f, -0.023733815f, 0.019494494f, 0.0055427826f, 0.045460507f, 0.07066554f, 0.022181382f, 0.018302314f, 0.026806992f, -0.006066003f, 0.046525814f, -0.04066389f, 0.019001767f, 0.021242762f, -0.020784091f, -0.031635042f, 0.04573943f, 0.02515421f, -0.050663553f, -0.05183343f, -0.046468202f, -0.07910535f, 0.017036669f, 0.021445233f, 0.04277428f, -0.020235524f, -0.055314954f, 0.00904601f, -0.01104365f, 0.03069203f, -0.00821997f, -0.035594665f, 0.024322856f, -0.0068963314f, 0.009003657f, 0.00398102f, -0.008596356f, 0.014772055f, 0.02740991f, 0.025503553f, 0.0038213644f, -0.0047855405f, -0.034888722f, 0.030553816f, -0.008325959f, 0.030010607f, 0.023729775f, 0.016138833f, -0.022967983f, -0.08616877f, -0.02460819f, -0.008210168f, -0.06444098f, 0.018750126f, -0.03335763f, 0.022024624f, 0.032374356f, 0.023870794f, 0.021288997f, -0.026617877f, 0.020435361f, -0.003692393f, -0.024113296f, 0.044870164f, -0.030451361f, 0.013022849f, 0.002278627f, -0.027616743f, -0.012087787f, -0.033232547f, -0.022974484f, 0.02801226f, -0.029057292f, 0.060317725f, -0.02312559f, 0.015558754f, 0.073630534f, 0.02490823f, -0.0140531305f, -0.043771528f, 0.040756326f, 0.01667925f, -0.0046050115f, -0.08938058f, 0.10560781f, 0.015044094f, 0.003613817f, 0.013523503f, -0.011039813f, 0.06396795f, 0.013428416f, -0.025031878f, -0.014972648f, -0.015970055f, 0.037022553f, -0.013759925f, 0.013363354f, 0.0039748577f, -0.0040822625f, 0.018209668f, -0.057496265f, 0.034993384f, 0.07075411f, 0.023498386f, 0.085871644f, 0.028646072f, 0.007590898f, 0.07037031f, -0.05005178f, 0.010477505f, -0.014106617f, 0.013402172f, 0.007472563f, -0.03131418f, 0.020552127f, -0.031878896f, -0.04170217f, -0.03153583f, 0.03458349f, 0.03366634f, 0.021306382f, -0.037176874f, 0.029069472f, 0.014662372f, 0.0024123765f, -0.025403008f, -0.0372993f, -0.049923114f, -0.014209514f, -0.015524425f, 0.036377322f, 0.04259327f, -0.029715618f, 0.02657093f, -0.0062432447f, -0.0024253451f, -0.021287171f, 0.010478781f, -0.029322306f, -0.021203341f, 0.047209084f, 0.025337176f, 0.018471811f, -0.008709492f, -0.047414266f, -0.06227469f, -0.05713435f, 0.02141101f, 0.024481304f, 0.07176469f, 0.0211379f, -0.049316987f, -0.124073654f, 0.0049275495f, -0.02461509f, -0.02738388f, 0.04825289f, -0.05069646f, 0.012640115f, -0.0061352802f, 0.034599125f, 0.02799496f, -0.01511028f, -0.046418104f, 0.011309801f, 0.016673129f, -0.033531003f, -0.049203333f, -0.027218347f, -0.03528408f, 0.008881575f, 0.010736325f, 0.034232814f, 0.012807507f, -0.0100207105f, 0.0067757815f, 0.009538357f, 0.026212366f, -0.036120333f, -0.019764563f, 0.006527411f, -0.016437015f, -0.009759148f, -0.042246807f, 0.012492151f, 0.0066206953f, 0.010672299f, -0.44499892f, -0.036189068f, -0.015703931f, -0.031111298f, -0.020329623f, 0.0047888453f, 0.090396516f, -0.041484866f, 0.033830352f, -0.0033847596f, 0.06065415f, 0.030880837f, 0.05558494f, 0.022805553f, 0.009607596f, 0.006682602f, 0.036806617f, 0.02406229f, 0.034229457f, -0.0105605405f, 0.034754273f, 0.02436426f, -0.03849325f, 0.021132406f, -0.01251386f, 0.022090863f, -0.029137045f, 0.0064384523f, -0.03175176f, -0.0070441505f, 0.016025176f, -0.023172623f, 0.00076795724f, -0.024106828f, -0.045440633f, -0.0074440194f, 0.00035374766f, 0.024374487f, 0.0058897804f, -0.012461025f, -0.029086761f, 0.0029477053f, -0.022914894f, -0.032369837f, 0.020743662f, 0.024116345f, 0.0020526652f, 0.0008596536f, -0.000583463f, 0.061080184f, 0.020812698f, -0.0235381f, 0.08112197f, 0.05689626f, -0.003070104f, -0.010714772f, -0.004864459f, 0.027089117f, -0.030910335f, 0.0017404438f, -0.014978656f, 0.0127020255f, 0.01878998f, -0.051732827f, -0.0037475713f, 0.013033434f, -0.023682894f, -0.03219574f, 0.03736345f, 0.0058930484f, -0.054040316f, 0.047637977f, 0.012636436f, -0.05820182f, 0.013828813f, -0.057893142f, -0.012405234f, 0.030266648f, -0.0029184038f, -0.021839319f, -0.045179468f, -0.013123978f, -0.021320488f, 0.0015718226f, 0.020244086f, -0.014414709f, 0.009535103f, -0.004497577f, -0.02577227f, -0.0085017495f, 0.029090486f, 0.009356506f, 0.0055838437f, 0.021151636f, 0.039531752f, 0.07814674f, 0.043186333f, -0.0077368533f, 0.028967595f, 0.025058193f, 0.05432941f, -0.04383656f, -0.027070394f, -0.080263995f, -0.03616516f, -0.026129462f, -0.0033627374f, 0.035040155f, 0.015231506f, -0.06372076f, 0.046391208f, 0.0049725454f, 0.003783345f, -0.057800908f, 0.061461f, -0.017880175f, 0.022820404f, 0.048944063f, 0.04725843f, -0.013392871f, 0.05023065f, 0.0069421427f, -0.019561166f, 0.012953843f, 0.06227977f, -0.02114757f, -0.003334329f, 0.023241237f, -0.061053444f, -0.023145229f, 0.016086273f, 0.0774039f, 0.008069459f, -0.0013532874f, -0.016790181f, -0.027246375f, -0.03254919f, 0.033754334f, 0.00037142826f, -0.02387325f, 0.0057056695f, 0.0084914565f, -0.051856343f, 0.029254f, 0.005583839f, 0.011591886f, -0.033027634f, -0.004170374f, 0.018334484f, -0.0030969654f, 0.0024489106f, 0.0030196267f, 0.023012564f, 0.020529047f, 0.00010772953f, 0.0017700809f, 0.029260442f, -0.018829526f, -0.024797931f, -0.039499596f, 0.008108761f, -0.013099816f, -0.11726566f, -0.005652353f, -0.008117937f, -0.012961832f, 0.0152542135f, -0.06429504f, 0.0184562f, 0.058997117f, -0.027178442f, -0.019294549f, -0.01587592f, 0.0048053437f, 0.043830805f, 0.011232237f, -0.026841154f, -0.0007282251f, -0.00862919f, -0.008405325f, 0.019370917f, -0.008112641f, -0.014931766f, 0.065622255f, 0.0149185015f, 0.013089685f, -0.0028022556f, -0.028629888f, -0.048105706f, 0.009296162f, 0.010251239f, 0.030800395f, 0.028263845f, -0.011021621f, -0.034127586f, 0.014709971f, -0.0075270324f, 0.010737263f, 0.020517904f, -0.012932179f, 0.007153817f, 0.03736311f, -0.03391106f, 0.03028614f, 0.012531187f, -0.046059456f, -0.0043963846f, 0.028799629f, -0.06663413f, -0.009447025f, -0.019833198f, -0.036111858f, -0.01901045f, 0.040701825f, 0.0060573653f, 0.027482377f, -0.019782187f, -0.020186251f, 0.028398912f, 0.027108852f, 0.026535714f, -0.000995191f, -0.020599326f, -0.005658084f, -0.017271476f, 0.026300041f, -0.006992451f, -0.08593853f, 0.03675959f, 0.0029454317f, -0.040927384f, -0.035480253f, 0.016498009f, -0.03406521f, -0.026182177f, -0.0007024827f, 0.019500641f, 0.0047998386f, -0.02416359f, 0.0019833131f, 0.0033488963f, 0.037788488f, -0.009154958f, -0.043469638f, -0.024896f, -0.017234193f, 0.044996973f, -0.06303135f, -0.051730774f, 0.04041444f, 0.0075959326f, -0.03901764f, -0.019851806f, -0.008242245f, 0.06107143f, 0.030118924f, -0.016167669f, -0.028161867f, -0.0025679746f, -0.021713274f, 0.025275888f, -0.012819265f, -0.036431268f, 0.017991759f, 0.040626206f, -0.0036572467f, -0.0005935883f, -0.0037468506f, 0.034460746f, -0.0182785f, -0.00431203f, -0.044755403f, 0.016463224f, 0.041199315f, -0.0093387f, 0.03919184f, -0.01151653f, -0.016965209f, 0.006347649f, 0.021104146f, 0.060276803f, -0.026659148f, 0.026461488f, -0.032700688f, 0.0012274865f, -0.024675943f, -0.003006079f, -0.009607032f, 0.010597691f, 0.0043017124f, -0.01908524f, 0.006748306f, -0.03049305f, -0.017481703f, 0.036747415f, 0.036634356f, 0.0007106319f, 0.045647435f, -0.020883067f, -0.0593661f, -0.03929885f, 0.042825453f, 0.016104022f, -0.03222858f, 0.031112716f, 0.020407677f, -0.013276762f, 0.03657825f, -0.033871554f, 0.004176301f, 0.009538976f, -0.009995692f, 0.0042660628f, 0.050545394f, -0.018142857f, 0.005219403f, 0.0006711967f, -0.014264284f, 0.031044828f, -0.01827481f, 0.012488852f, 0.031393733f, 0.050390214f, -0.014484084f, -0.054758117f, 0.055042055f, -0.005506624f, -0.0066648237f, 0.010891078f, 0.012446279f, 0.061687976f, 0.018091502f, 0.0026527622f, 0.0321537f, -0.02469515f, 0.01772019f, 0.006846163f, -0.07471038f, -0.024433741f, 0.02483875f, 0.0497063f, 0.0043456135f, 0.056550737f, 0.035752796f, -0.02430349f, 0.036570627f, -0.027576203f, -0.012418993f, 0.023442797f, -0.03433812f, 0.01953399f, -0.028003592f, -0.021168072f, 0.019414881f, -0.014712576f, -0.0003938545f, 0.021453558f, -0.023197332f, -0.004455581f, -0.08799191f, 0.0010808896f, 0.009281116f, -0.0051161298f, 0.031497046f, 0.034916095f, -0.023042161f, 0.030799815f, 0.017298799f, 0.0015253434f, 0.013728047f, 0.0035838438f, 0.016767647f, -0.022243451f, 0.013371096f, 0.053564783f, -0.008776885f, -0.013133307f, 0.015577713f, -0.027008705f, 0.009490815f, -0.04103532f, -0.012426461f, -0.0050485474f, -0.04323231f, -0.013291623f, -0.01660157f, -0.055480026f, 0.017622838f, 0.017476618f, -0.009798125f, 0.038226977f, -0.03127579f, 0.019329516f, 0.033461004f, -0.0039813113f, -0.039526325f, 0.03884973f, -0.011381027f, -0.023257744f, 0.03033401f, 0.0029607012f, -0.0006490531f, -0.0347344f, 0.029701462f, -0.04153701f, 0.028073426f, -0.025427297f, 0.009756264f, -0.048082624f, 0.021743972f, 0.057197016f, 0.024082556f, -0.013968224f, 0.044379756f, -0.029081704f, 0.003487999f, 0.042621125f, -0.04339743f, -0.027005397f, -0.02944044f, -0.024172144f, -0.07388652f, 0.05952364f, 0.02561452f, -0.010255158f, -0.015288555f, 0.045012463f, 0.012403602f, -0.021197597f, 0.025847573f, -0.016983166f, 0.03021369f, -0.02920852f, 0.035140667f, -0.010627725f, -0.020431923f, 0.03191218f, 0.0046844087f, 0.056356475f, -0.00012615003f, -0.0052536936f, -0.058609407f, 0.009710908f, 0.00041168949f, -0.22300485f, -0.0077232462f, 0.0029359192f, -0.028645728f, -0.021156758f, 0.029606635f, -0.026473567f, -0.0019432966f, 0.023867624f, 0.021946864f, -0.00082128344f, 0.01897284f, -0.017976845f, -0.015677344f, -0.0026336901f, 0.030096486f));
        row.put("link", "https://medium.com/swlh/the-reported-mortality-rate-of-coronavirus-is-not-important-369989c8d912");
        row.put("reading_time", 13L);
        row.put("publication", "The Startup");
        row.put("claps", 1100L);
        row.put("responses", 18L);
        rows1.add(row);

        InsertParam insertParam = InsertParam.newBuilder()
            .withCollectionName(collectionName)
            .withPartitionName(partitionName)
            .withRows(rows1)
            .build();

        R<MutationResult> insertRes = client.insert(insertParam);

        if (res.getException() != null) {
            System.err.println("Failed to insert: " + insertRes.getException().getMessage());
            return;
        }

        Long insertCount = insertRes.getData().getInsertCnt();
        List<Integer> insertedIds = insertRes.getData().getSuccIndexList();

        System.out.println("Successfully inserted " + insertCount + " records");

        // Output:
        // Successfully inserted 1 records





        System.out.println(insertedIds);

        // Output:
        // [0]





        // 9. Insert multiple entities into a partition

        // To insert multiple entities at a time, organize your data in a list of dictionaries.
        // Each dictionary represents an entity, and the keys are the field names.

        List<JSONObject> rows2 = new ArrayList<>();
        JSONObject row1 = new JSONObject();
        JSONObject row2 = new JSONObject();
        JSONObject row3 = new JSONObject();
        row1.put("id", 0L);
        row1.put("title", "The Reported Mortality Rate of Coronavirus Is Not Important");
        row1.put("title_vector", Lists.newArrayList(0.041732933f, 0.013779674f, -0.027564144f, -0.013061441f, 0.009748648f, 0.00082446384f, -0.00071647146f, 0.048612226f, -0.04836573f, -0.04567751f, 0.018008126f, 0.0063936645f, -0.011913628f, 0.030776596f, -0.018274948f, 0.019929802f, 0.020547243f, 0.032735646f, -0.031652678f, -0.033816382f, -0.051087562f, -0.033748355f, 0.0039493158f, 0.009246126f, -0.060236514f, -0.017136049f, 0.028754413f, -0.008433934f, 0.011168004f, -0.012391256f, -0.011225835f, 0.031775184f, 0.002929508f, -0.007448661f, -0.005337719f, -0.010999258f, -0.01515909f, -0.005130484f, 0.0060212007f, 0.0034560722f, -0.022935811f, -0.04970116f, -0.0155887455f, 0.06627353f, -0.006052789f, -0.051570725f, -0.109865054f, 0.033205193f, 0.00041118253f, 0.0029823708f, 0.036160238f, -0.011256539f, 0.00023560718f, 0.058322437f, 0.022275906f, 0.015206677f, -0.02884609f, 0.0016338055f, 0.0049200393f, 0.014388571f, -0.0049061654f, -0.04664761f, -0.027454877f, 0.017526226f, -0.005100602f, 0.018090058f, 0.02700998f, 0.04031944f, -0.0097965f, -0.03674761f, -0.0043163053f, -0.023320708f, 0.012654851f, -0.014262311f, -0.008081833f, -0.018334744f, 0.0014025003f, -0.003053399f, -0.002636383f, -0.022398386f, -0.004725274f, 0.00036367847f, -0.012368711f, 0.0014739085f, 0.03450414f, 0.009684024f, 0.017912658f, 0.06594397f, 0.021381201f, 0.029343689f, -0.0069561847f, 0.026152428f, 0.04635037f, 0.014746184f, -0.002119602f, 0.034359712f, -0.013705124f, 0.010691518f, 0.04060854f, 0.013679299f, -0.018990282f, 0.035340093f, 0.007353945f, -0.035990074f, 0.013126987f, -0.032933377f, -0.001756877f, -0.0049658176f, -0.03380879f, -0.07024137f, -0.0130426735f, 0.010533265f, -0.023091802f, -0.004645729f, -0.03344451f, 0.04759929f, 0.025985204f, -0.040710885f, -0.016681142f, -0.024664842f, -0.025170377f, 0.08839205f, -0.023733815f, 0.019494494f, 0.0055427826f, 0.045460507f, 0.07066554f, 0.022181382f, 0.018302314f, 0.026806992f, -0.006066003f, 0.046525814f, -0.04066389f, 0.019001767f, 0.021242762f, -0.020784091f, -0.031635042f, 0.04573943f, 0.02515421f, -0.050663553f, -0.05183343f, -0.046468202f, -0.07910535f, 0.017036669f, 0.021445233f, 0.04277428f, -0.020235524f, -0.055314954f, 0.00904601f, -0.01104365f, 0.03069203f, -0.00821997f, -0.035594665f, 0.024322856f, -0.0068963314f, 0.009003657f, 0.00398102f, -0.008596356f, 0.014772055f, 0.02740991f, 0.025503553f, 0.0038213644f, -0.0047855405f, -0.034888722f, 0.030553816f, -0.008325959f, 0.030010607f, 0.023729775f, 0.016138833f, -0.022967983f, -0.08616877f, -0.02460819f, -0.008210168f, -0.06444098f, 0.018750126f, -0.03335763f, 0.022024624f, 0.032374356f, 0.023870794f, 0.021288997f, -0.026617877f, 0.020435361f, -0.003692393f, -0.024113296f, 0.044870164f, -0.030451361f, 0.013022849f, 0.002278627f, -0.027616743f, -0.012087787f, -0.033232547f, -0.022974484f, 0.02801226f, -0.029057292f, 0.060317725f, -0.02312559f, 0.015558754f, 0.073630534f, 0.02490823f, -0.0140531305f, -0.043771528f, 0.040756326f, 0.01667925f, -0.0046050115f, -0.08938058f, 0.10560781f, 0.015044094f, 0.003613817f, 0.013523503f, -0.011039813f, 0.06396795f, 0.013428416f, -0.025031878f, -0.014972648f, -0.015970055f, 0.037022553f, -0.013759925f, 0.013363354f, 0.0039748577f, -0.0040822625f, 0.018209668f, -0.057496265f, 0.034993384f, 0.07075411f, 0.023498386f, 0.085871644f, 0.028646072f, 0.007590898f, 0.07037031f, -0.05005178f, 0.010477505f, -0.014106617f, 0.013402172f, 0.007472563f, -0.03131418f, 0.020552127f, -0.031878896f, -0.04170217f, -0.03153583f, 0.03458349f, 0.03366634f, 0.021306382f, -0.037176874f, 0.029069472f, 0.014662372f, 0.0024123765f, -0.025403008f, -0.0372993f, -0.049923114f, -0.014209514f, -0.015524425f, 0.036377322f, 0.04259327f, -0.029715618f, 0.02657093f, -0.0062432447f, -0.0024253451f, -0.021287171f, 0.010478781f, -0.029322306f, -0.021203341f, 0.047209084f, 0.025337176f, 0.018471811f, -0.008709492f, -0.047414266f, -0.06227469f, -0.05713435f, 0.02141101f, 0.024481304f, 0.07176469f, 0.0211379f, -0.049316987f, -0.124073654f, 0.0049275495f, -0.02461509f, -0.02738388f, 0.04825289f, -0.05069646f, 0.012640115f, -0.0061352802f, 0.034599125f, 0.02799496f, -0.01511028f, -0.046418104f, 0.011309801f, 0.016673129f, -0.033531003f, -0.049203333f, -0.027218347f, -0.03528408f, 0.008881575f, 0.010736325f, 0.034232814f, 0.012807507f, -0.0100207105f, 0.0067757815f, 0.009538357f, 0.026212366f, -0.036120333f, -0.019764563f, 0.006527411f, -0.016437015f, -0.009759148f, -0.042246807f, 0.012492151f, 0.0066206953f, 0.010672299f, -0.44499892f, -0.036189068f, -0.015703931f, -0.031111298f, -0.020329623f, 0.0047888453f, 0.090396516f, -0.041484866f, 0.033830352f, -0.0033847596f, 0.06065415f, 0.030880837f, 0.05558494f, 0.022805553f, 0.009607596f, 0.006682602f, 0.036806617f, 0.02406229f, 0.034229457f, -0.0105605405f, 0.034754273f, 0.02436426f, -0.03849325f, 0.021132406f, -0.01251386f, 0.022090863f, -0.029137045f, 0.0064384523f, -0.03175176f, -0.0070441505f, 0.016025176f, -0.023172623f, 0.00076795724f, -0.024106828f, -0.045440633f, -0.0074440194f, 0.00035374766f, 0.024374487f, 0.0058897804f, -0.012461025f, -0.029086761f, 0.0029477053f, -0.022914894f, -0.032369837f, 0.020743662f, 0.024116345f, 0.0020526652f, 0.0008596536f, -0.000583463f, 0.061080184f, 0.020812698f, -0.0235381f, 0.08112197f, 0.05689626f, -0.003070104f, -0.010714772f, -0.004864459f, 0.027089117f, -0.030910335f, 0.0017404438f, -0.014978656f, 0.0127020255f, 0.01878998f, -0.051732827f, -0.0037475713f, 0.013033434f, -0.023682894f, -0.03219574f, 0.03736345f, 0.0058930484f, -0.054040316f, 0.047637977f, 0.012636436f, -0.05820182f, 0.013828813f, -0.057893142f, -0.012405234f, 0.030266648f, -0.0029184038f, -0.021839319f, -0.045179468f, -0.013123978f, -0.021320488f, 0.0015718226f, 0.020244086f, -0.014414709f, 0.009535103f, -0.004497577f, -0.02577227f, -0.0085017495f, 0.029090486f, 0.009356506f, 0.0055838437f, 0.021151636f, 0.039531752f, 0.07814674f, 0.043186333f, -0.0077368533f, 0.028967595f, 0.025058193f, 0.05432941f, -0.04383656f, -0.027070394f, -0.080263995f, -0.03616516f, -0.026129462f, -0.0033627374f, 0.035040155f, 0.015231506f, -0.06372076f, 0.046391208f, 0.0049725454f, 0.003783345f, -0.057800908f, 0.061461f, -0.017880175f, 0.022820404f, 0.048944063f, 0.04725843f, -0.013392871f, 0.05023065f, 0.0069421427f, -0.019561166f, 0.012953843f, 0.06227977f, -0.02114757f, -0.003334329f, 0.023241237f, -0.061053444f, -0.023145229f, 0.016086273f, 0.0774039f, 0.008069459f, -0.0013532874f, -0.016790181f, -0.027246375f, -0.03254919f, 0.033754334f, 0.00037142826f, -0.02387325f, 0.0057056695f, 0.0084914565f, -0.051856343f, 0.029254f, 0.005583839f, 0.011591886f, -0.033027634f, -0.004170374f, 0.018334484f, -0.0030969654f, 0.0024489106f, 0.0030196267f, 0.023012564f, 0.020529047f, 0.00010772953f, 0.0017700809f, 0.029260442f, -0.018829526f, -0.024797931f, -0.039499596f, 0.008108761f, -0.013099816f, -0.11726566f, -0.005652353f, -0.008117937f, -0.012961832f, 0.0152542135f, -0.06429504f, 0.0184562f, 0.058997117f, -0.027178442f, -0.019294549f, -0.01587592f, 0.0048053437f, 0.043830805f, 0.011232237f, -0.026841154f, -0.0007282251f, -0.00862919f, -0.008405325f, 0.019370917f, -0.008112641f, -0.014931766f, 0.065622255f, 0.0149185015f, 0.013089685f, -0.0028022556f, -0.028629888f, -0.048105706f, 0.009296162f, 0.010251239f, 0.030800395f, 0.028263845f, -0.011021621f, -0.034127586f, 0.014709971f, -0.0075270324f, 0.010737263f, 0.020517904f, -0.012932179f, 0.007153817f, 0.03736311f, -0.03391106f, 0.03028614f, 0.012531187f, -0.046059456f, -0.0043963846f, 0.028799629f, -0.06663413f, -0.009447025f, -0.019833198f, -0.036111858f, -0.01901045f, 0.040701825f, 0.0060573653f, 0.027482377f, -0.019782187f, -0.020186251f, 0.028398912f, 0.027108852f, 0.026535714f, -0.000995191f, -0.020599326f, -0.005658084f, -0.017271476f, 0.026300041f, -0.006992451f, -0.08593853f, 0.03675959f, 0.0029454317f, -0.040927384f, -0.035480253f, 0.016498009f, -0.03406521f, -0.026182177f, -0.0007024827f, 0.019500641f, 0.0047998386f, -0.02416359f, 0.0019833131f, 0.0033488963f, 0.037788488f, -0.009154958f, -0.043469638f, -0.024896f, -0.017234193f, 0.044996973f, -0.06303135f, -0.051730774f, 0.04041444f, 0.0075959326f, -0.03901764f, -0.019851806f, -0.008242245f, 0.06107143f, 0.030118924f, -0.016167669f, -0.028161867f, -0.0025679746f, -0.021713274f, 0.025275888f, -0.012819265f, -0.036431268f, 0.017991759f, 0.040626206f, -0.0036572467f, -0.0005935883f, -0.0037468506f, 0.034460746f, -0.0182785f, -0.00431203f, -0.044755403f, 0.016463224f, 0.041199315f, -0.0093387f, 0.03919184f, -0.01151653f, -0.016965209f, 0.006347649f, 0.021104146f, 0.060276803f, -0.026659148f, 0.026461488f, -0.032700688f, 0.0012274865f, -0.024675943f, -0.003006079f, -0.009607032f, 0.010597691f, 0.0043017124f, -0.01908524f, 0.006748306f, -0.03049305f, -0.017481703f, 0.036747415f, 0.036634356f, 0.0007106319f, 0.045647435f, -0.020883067f, -0.0593661f, -0.03929885f, 0.042825453f, 0.016104022f, -0.03222858f, 0.031112716f, 0.020407677f, -0.013276762f, 0.03657825f, -0.033871554f, 0.004176301f, 0.009538976f, -0.009995692f, 0.0042660628f, 0.050545394f, -0.018142857f, 0.005219403f, 0.0006711967f, -0.014264284f, 0.031044828f, -0.01827481f, 0.012488852f, 0.031393733f, 0.050390214f, -0.014484084f, -0.054758117f, 0.055042055f, -0.005506624f, -0.0066648237f, 0.010891078f, 0.012446279f, 0.061687976f, 0.018091502f, 0.0026527622f, 0.0321537f, -0.02469515f, 0.01772019f, 0.006846163f, -0.07471038f, -0.024433741f, 0.02483875f, 0.0497063f, 0.0043456135f, 0.056550737f, 0.035752796f, -0.02430349f, 0.036570627f, -0.027576203f, -0.012418993f, 0.023442797f, -0.03433812f, 0.01953399f, -0.028003592f, -0.021168072f, 0.019414881f, -0.014712576f, -0.0003938545f, 0.021453558f, -0.023197332f, -0.004455581f, -0.08799191f, 0.0010808896f, 0.009281116f, -0.0051161298f, 0.031497046f, 0.034916095f, -0.023042161f, 0.030799815f, 0.017298799f, 0.0015253434f, 0.013728047f, 0.0035838438f, 0.016767647f, -0.022243451f, 0.013371096f, 0.053564783f, -0.008776885f, -0.013133307f, 0.015577713f, -0.027008705f, 0.009490815f, -0.04103532f, -0.012426461f, -0.0050485474f, -0.04323231f, -0.013291623f, -0.01660157f, -0.055480026f, 0.017622838f, 0.017476618f, -0.009798125f, 0.038226977f, -0.03127579f, 0.019329516f, 0.033461004f, -0.0039813113f, -0.039526325f, 0.03884973f, -0.011381027f, -0.023257744f, 0.03033401f, 0.0029607012f, -0.0006490531f, -0.0347344f, 0.029701462f, -0.04153701f, 0.028073426f, -0.025427297f, 0.009756264f, -0.048082624f, 0.021743972f, 0.057197016f, 0.024082556f, -0.013968224f, 0.044379756f, -0.029081704f, 0.003487999f, 0.042621125f, -0.04339743f, -0.027005397f, -0.02944044f, -0.024172144f, -0.07388652f, 0.05952364f, 0.02561452f, -0.010255158f, -0.015288555f, 0.045012463f, 0.012403602f, -0.021197597f, 0.025847573f, -0.016983166f, 0.03021369f, -0.02920852f, 0.035140667f, -0.010627725f, -0.020431923f, 0.03191218f, 0.0046844087f, 0.056356475f, -0.00012615003f, -0.0052536936f, -0.058609407f, 0.009710908f, 0.00041168949f, -0.22300485f, -0.0077232462f, 0.0029359192f, -0.028645728f, -0.021156758f, 0.029606635f, -0.026473567f, -0.0019432966f, 0.023867624f, 0.021946864f, -0.00082128344f, 0.01897284f, -0.017976845f, -0.015677344f, -0.0026336901f, 0.030096486f));
        row1.put("link", "https://medium.com/swlh/the-reported-mortality-rate-of-coronavirus-is-not-important-369989c8d912");
        row1.put("reading_time", 13L);
        row1.put("publication", "The Startup");
        row1.put("claps", 1100L);
        row1.put("responses", 18L); 
        row2.put("id", 1L);
        row2.put("title", "Dashboards in Python: 3 Advanced Examples for Dash Beginners and Everyone Else");
        row2.put("title_vector", Lists.newArrayList(0.0039737443f, 0.003020432f, -0.0006188639f, 0.03913546f, -0.00089768134f, 0.021238148f, 0.014454661f, 0.025742851f, 0.0022063442f, -0.051130578f, -0.0010897011f, 0.038453076f, 0.011593861f, -0.046852026f, 0.0064208573f, 0.010120634f, -0.023668954f, 0.041229635f, 0.008146385f, -0.023367394f, -0.029139837f, -0.023222756f, -0.016318452f, -0.076287195f, 0.035851076f, 0.044926822f, 0.0037161126f, 0.024241403f, -0.024827085f, -0.012770665f, 0.0018561907f, 0.047921725f, -0.030281143f, -0.031129083f, -0.038785066f, -0.048101038f, 0.008587025f, -0.0036647166f, -0.013043694f, -0.044786748f, 0.0015023423f, -0.02393749f, 0.027479807f, 0.03407725f, -0.011031249f, -0.016997544f, -0.11140522f, -0.0012403706f, -0.0116099715f, 0.010803051f, -0.042221617f, 0.071550176f, 0.029078195f, 0.02936992f, -0.016870253f, 0.024187507f, -0.0064322287f, -0.0018420032f, -0.010838795f, 0.005448679f, 0.042049922f, 0.015199081f, -0.00612731f, 0.04651738f, -0.0004543191f, 0.0018536948f, -0.021741537f, 0.042303678f, -0.016282137f, 0.031659417f, 0.03347323f, -0.05687932f, -0.04784338f, 0.047716856f, -0.04012971f, -0.024161791f, -0.015605036f, 0.01364975f, 0.023177518f, 0.01887649f, 0.040253926f, 0.021470893f, 0.09768697f, -0.032784328f, 0.03222924f, 0.03559948f, -0.0028161134f, 0.03687029f, -0.013814558f, -0.009652667f, 0.021593641f, -0.05943368f, 0.026042875f, 0.028282177f, 0.007687183f, 0.020226369f, -0.0016281981f, -0.008526736f, 0.025751492f, -0.003104332f, -0.0061201006f, 0.02595484f, -0.021449475f, -0.014293144f, -0.029449001f, 0.0020593074f, -0.034804724f, -0.022180008f, -0.006285631f, 0.013707787f, -0.037423145f, -0.009107584f, -0.009432007f, 0.010610414f, -0.056727782f, 0.0233536f, -0.0060632285f, 0.055170756f, 0.015278058f, -0.0074357074f, 0.038479842f, 0.07088861f, 0.06036749f, 0.015448346f, 0.024050185f, 0.015041763f, 0.022847643f, 0.018183885f, 0.047313735f, 0.026332416f, -0.002408156f, 0.04366259f, 0.0057872427f, -0.02127312f, -0.020023786f, -0.02634593f, 0.028322363f, 0.020426102f, 0.026535949f, 0.031108813f, -0.03800821f, -0.016794013f, -0.0022405083f, -0.028002623f, 0.013555326f, -0.020880137f, -0.040561143f, -0.024379047f, -0.058721762f, 0.009864129f, -0.0060728258f, 0.019879017f, -0.027474888f, 0.004868736f, -0.01618118f, 0.07627549f, -0.009566949f, -0.0362882f, -0.0013981637f, 0.00036380984f, 0.025276562f, 0.061608184f, -0.048915602f, -0.043986745f, -0.0055106534f, -0.03694729f, 0.0018953384f, 0.0063064545f, 0.010227479f, -0.0068412647f, -0.011093203f, -0.0093250135f, -0.019277632f, 0.026233265f, 0.009567129f, 0.008851426f, 0.01565083f, 0.02383659f, 0.058387164f, 0.007578936f, -0.039052304f, -0.020484922f, 0.041768145f, -0.038177934f, 0.032690376f, -0.0088214185f, 0.040147487f, 0.015718441f, -0.026545178f, -0.023138655f, -0.055501554f, -0.06176257f, 0.01347796f, -0.043426935f, 0.09015595f, -0.05628449f, -0.03414897f, 0.077925004f, 0.039848283f, 0.004569112f, -0.021932716f, -0.008975595f, 0.032322578f, 0.0011694044f, -0.008094395f, 0.013524566f, -0.010504273f, -0.008891303f, -0.047701288f, -0.003401436f, -0.006817342f, -0.0131783355f, 0.013252014f, -0.02291292f, 0.005158376f, -0.005217175f, -0.009027178f, 0.01674159f, 0.0062977904f, -0.0021274886f, 0.1001569f, -0.010145763f, 0.00398632f, 0.016642937f, -0.04561657f, -0.00593123f, 0.068103015f, 0.022859594f, 0.055262484f, -0.07711217f, -0.013573f, 0.00793467f, -0.00206392f, -0.055678505f, -0.0027695482f, -0.008978216f, 0.023205645f, 0.010584002f, 0.036940057f, 0.0055925045f, -0.03128972f, 0.008169264f, 0.002143065f, 0.0054644635f, 0.007751248f, -0.049370192f, -0.017171964f, 0.012460248f, -0.039616507f, -0.008905116f, -0.029277697f, 0.0316178f, 0.007783805f, -0.046197712f, -0.02389374f, 0.03949501f, 0.012882567f, -0.050312858f, -0.0025155935f, 0.05531826f, -0.0060943947f, 0.040836193f, -0.0057800347f, 0.0639973f, 0.009591699f, -0.05218372f, -0.03645041f, -0.05206777f, 0.053644467f, 0.071591765f, 0.008294372f, 0.0028174156f, 0.0048404625f, 0.013453085f, 0.022866488f, -0.06087804f, 0.023474297f, 0.027761765f, -0.040729735f, -0.009113696f, 0.020109607f, 0.010756393f, 0.066961266f, -0.03530044f, -0.0013631586f, -0.034647003f, 0.03281657f, -0.055955954f, -0.043759737f, -0.014830927f, -0.0012740378f, 0.053068876f, 0.0041171f, -0.009249764f, 0.04119711f, -0.0022221678f, 0.008220726f, 0.011716879f, 0.04751782f, -0.021161754f, -0.0034890848f, 0.017168297f, 0.018082855f, -0.054346565f, 0.01130623f, -0.014759945f, -0.020925378f, -0.011718521f, -0.5058962f, -0.016079627f, -0.05195381f, -0.065540574f, -0.024114326f, 0.0045832954f, 0.05303542f, -0.040304415f, -0.001513657f, 0.019103762f, 0.008554532f, 0.053032935f, -0.00915671f, -0.009092158f, -0.009177251f, 0.028371146f, 0.028055405f, -0.008145964f, 0.011927662f, 0.027140373f, -0.04623f, -0.026633251f, -0.00019752477f, 0.045192443f, 0.02449006f, 0.013997616f, -0.06873905f, 0.027910134f, 0.003347047f, 0.0013439717f, 0.034202795f, -0.015585498f, -0.055015743f, 0.00016024683f, -0.015891591f, -0.021741774f, 0.025558911f, 0.011084363f, 0.014056266f, -0.018982887f, 0.0016998561f, 0.048058353f, 0.007829392f, 0.0018672302f, 0.041273497f, -0.039120134f, 0.0003624535f, -0.0011298673f, -0.006326307f, 0.032140832f, -0.037109844f, -0.00041404666f, -0.0084530655f, 0.0077904286f, 0.012144728f, -0.03869803f, 0.047453202f, 0.04121898f, -0.032067478f, 0.022875102f, 0.07410041f, -0.024542922f, -0.036993448f, -0.039777547f, 0.0094557f, -0.025156112f, -0.035101883f, -0.048749104f, -0.0045563756f, -0.006167684f, -0.048193872f, 0.0017396678f, 0.019029584f, -0.061944872f, 0.050563816f, -0.021848006f, 0.008817201f, 0.010323988f, 0.020705162f, 0.018577144f, -0.048376583f, -0.041189134f, -0.0047300197f, -0.00836772f, -0.0052992413f, -0.035920832f, -0.029942693f, 0.028925791f, 0.030509083f, 0.00738733f, 0.124217756f, -0.04977689f, 0.023752924f, 0.027065763f, 0.057005685f, 0.03732509f, 0.069008276f, -0.022444589f, 0.0035944746f, -0.041807327f, 0.028195074f, -0.011788701f, -0.0034672262f, -0.014074685f, -0.009594197f, 0.0018883395f, -0.024706602f, 0.015436245f, 0.054175258f, -0.03945695f, -0.029252004f, -0.006543419f, -0.064558335f, 0.00635337f, 0.014417143f, 0.013945442f, -0.009091861f, 0.0005249867f, 0.010337455f, -0.009454559f, -0.035721924f, -0.022774082f, -0.031336624f, 0.0416093f, -0.038794383f, -0.008280955f, 0.033273164f, 0.013371025f, -0.0129316645f, -0.012368203f, 0.022565264f, -0.0012145197f, 0.01841233f, -0.002506566f, 0.02414115f, -0.047187645f, -0.0046407585f, 0.032652196f, 0.053410284f, -0.0365266f, -0.0063986774f, 0.023949109f, 0.010821287f, 0.013743939f, 0.04780526f, 0.008855356f, -0.028712442f, 0.010830425f, -0.0039607813f, 0.022576412f, -0.009031381f, -0.04623192f, 0.0140510835f, 0.009459673f, -0.0033195931f, 0.02447672f, 0.025940116f, 0.015182389f, -0.03030254f, -0.042433836f, 0.043204527f, -0.009033531f, -0.09083154f, -0.00031694994f, 0.030156016f, -0.030984623f, -0.031595454f, 0.002228252f, -0.003698093f, -0.006667667f, 0.023925511f, -0.045642223f, -0.0054936595f, -0.020487037f, -0.011321221f, -0.008023139f, -0.0022487226f, 0.016701572f, -0.004573161f, -0.0076336027f, -0.007048531f, -0.03015078f, 0.03309948f, 0.028124114f, 0.014135684f, 0.009500284f, -0.0033359944f, 0.017857917f, 0.034960285f, 0.005099243f, 0.021408139f, -0.0065242476f, 0.03559723f, 0.002711937f, -0.028567772f, -0.044500142f, 0.025019938f, 0.020869007f, -0.023909464f, -0.06710058f, -0.04702157f, -0.012781483f, -0.03416069f, 0.009026116f, 0.016877936f, -0.015858926f, 0.0432861f, 0.029753765f, -0.016831696f, -0.04155155f, -0.056399744f, -0.0632834f, -0.030745849f, -0.023681961f, -0.02031578f, -0.006460313f, 0.009156013f, -0.03944369f, -0.05559119f, 0.011855634f, 0.0043062386f, -0.026944742f, -0.05057878f, -0.033390008f, 0.0012567446f, 0.00859911f, 0.031703074f, -0.024424741f, 0.011032831f, -0.03794956f, -0.0058376114f, 0.050361525f, 0.02664676f, 0.035737876f, 9.327007e-05f, -0.0036208995f, -0.07552407f, 0.008858675f, 0.06525408f, -0.03309569f, -0.019470563f, 0.029411364f, -0.023945473f, -0.02741788f, 0.025530888f, -0.004085135f, -0.023078475f, -0.05026493f, -0.047704235f, 0.0063968995f, 0.05705471f, -0.039139755f, -0.016409663f, -0.050894372f, 0.0229268f, 0.024625905f, -0.020794865f, -0.018509613f, -0.0286961f, 0.02955773f, -0.012118265f, 0.007289678f, -0.017907536f, -9.589148e-05f, -0.014387568f, 0.01077215f, -0.0057492387f, -0.070152126f, 0.011277187f, -0.06932382f, 0.0064085126f, -0.002137664f, 0.020172758f, 0.018431762f, 0.02997658f, -0.035457257f, -0.027747527f, 0.023011072f, 0.0044074785f, 0.022357704f, -0.011456843f, -0.014637661f, 0.028279554f, -0.018716238f, 0.03532025f, 0.003035383f, 0.028103184f, -0.026085945f, -0.012884989f, 0.024874324f, 0.0021957066f, 0.038837254f, -0.013919544f, 0.021001196f, -0.006413539f, 0.03233318f, 0.054959916f, 0.002057221f, -0.008223584f, 0.02089053f, 0.031112751f, 0.06568271f, 0.07437756f, -0.032314405f, 0.0063390816f, 0.021723315f, 0.009370877f, -0.019755581f, -0.009407542f, 0.008717818f, -0.012684821f, -0.015996328f, 0.019934947f, 0.05044348f, -0.03040645f, -0.0076975147f, 0.013472682f, -0.04469578f, 0.059487574f, 0.0077290037f, -0.0062347664f, 0.017982362f, 0.047718633f, -0.029480672f, -0.049545363f, 0.019446652f, -0.012957434f, 0.021308606f, 0.0034625032f, 0.016427478f, 0.062390056f, 0.074961245f, -0.0017664412f, -0.0374053f, 0.006156502f, -0.023779914f, 0.022087418f, -0.0018362328f, 0.036417086f, -0.031101517f, 0.03615886f, 0.0011009142f, -0.009626947f, 0.0020367356f, -0.024929306f, 0.05029518f, 0.01021691f, 0.02706921f, -0.055606462f, 0.050653223f, -0.020299971f, 0.022907283f, -0.0078015765f, 0.0013674265f, -0.016805433f, -0.005469926f, -0.010843944f, 0.024753453f, 0.0036051865f, 0.021984477f, 0.019608894f, 0.056622125f, 0.0168941f, 5.6558e-05f, -0.037705585f, 0.010488043f, 0.055042468f, -0.012437194f, 0.017340036f, 0.008242167f, -0.032131612f, 0.046392333f, -0.050994188f, 0.013369047f, -0.031277575f, -0.057127792f, 0.026656566f, 0.012472042f, 0.03171042f, 0.0155100925f, -0.014371186f, -0.0074701216f, -0.03548123f, -0.019203192f, 0.020641252f, 0.037671227f, -0.050689723f, 0.012942378f, -0.010964106f, -0.009750868f, -0.032187466f, -0.030583298f, 0.031428117f, -0.030721085f, -0.009199497f, -0.025520792f, -0.016073162f, 0.03206433f, 0.035993624f, 0.005494608f, -0.02187293f, 0.026701238f, -0.013911904f, -0.0024700807f, -0.013015862f, 0.041535176f, -0.032522723f, 0.0139125f, -0.043542273f, -0.02516857f, 0.0098249065f, 0.018275063f, 0.0026843066f, 0.009207035f, -0.0024260108f, 0.014267937f, 0.04338487f, -0.006479658f, 0.026931532f, -0.013153546f, -0.032537226f, -0.012409599f, 0.03284542f, -0.014427827f, 0.00090851216f, 0.034384534f, 0.0022898254f, 0.013645849f, -0.0264273f, 0.04843669f, -0.037393637f, -0.026378367f, -0.03421471f, 0.023813134f, -0.037445217f, -0.018552892f, 0.006716699f, 0.033491645f, 0.046465095f, -0.024037533f, -0.027822671f, 0.017161718f, -0.0103931315f, 0.043290958f, -0.04675785f, 0.045929935f, -0.07786675f, -0.033439267f, -0.07128675f, 0.009419761f, -0.0013642106f, -0.022022273f, -0.019086521f, -0.0038238734f, -0.0007658402f, -0.0077877254f, 0.035752963f, -0.031361237f, -0.0020773965f, 0.021713957f));
        row2.put("link", "https://medium.com/swlh/dashboards-in-python-3-advanced-examples-for-dash-beginners-and-everyone-else-b1daf4e2ec0a");
        row2.put("reading_time", 14L);
        row2.put("publication", "The Startup");
        row2.put("claps", 726L);
        row2.put("responses", 3L);   
        row3.put("id", 2L);
        row3.put("title", "How Can We Best Switch in Python?");
        row3.put("title_vector", Lists.newArrayList(0.031961977f, 0.00047043373f, -0.018263113f, 0.027324716f, -0.0054595284f, -0.014779159f, 0.017511465f, 0.030381083f, -0.018930407f, -0.03372473f, -0.009049301f, 0.05401713f, -0.030117748f, -0.05029242f, -0.004565209f, -0.013697411f, 0.0091306195f, 0.020263411f, 0.022377398f, -0.013710004f, 0.00041742f, 0.0196022f, -0.03045922f, -0.009036885f, 0.015411235f, -0.010344614f, 0.025562054f, 0.017688023f, -0.030953526f, -0.016898274f, 0.026576879f, 0.027959209f, -0.003575494f, -0.021995515f, -0.013143332f, -0.008411754f, 0.015792666f, -0.007804189f, 0.011127249f, -0.018469824f, 0.000866601f, -0.0047294814f, 0.023057077f, 0.024769971f, 0.006347016f, -0.0053651906f, -0.10139431f, 0.009744879f, -0.004652395f, 0.004365174f, -0.055456053f, 0.03606845f, -0.00094139896f, 0.01640304f, -0.01252126f, 0.007557613f, -0.021284489f, -0.007097941f, -0.02953809f, 0.012779461f, 0.01165686f, 0.017842839f, -0.051064152f, 0.02416306f, 0.0010631426f, 0.04505233f, -0.010680273f, 0.03516956f, -0.032654032f, 0.0048729796f, 0.04184754f, -0.022647992f, -0.05048803f, 0.017783897f, -0.006307326f, -0.0036616833f, -0.03680091f, -0.002489206f, 0.010861639f, 0.01722319f, -0.0085470015f, 0.052702323f, 0.045617685f, -0.03452536f, 0.07228468f, -0.0032563882f, 0.0072233807f, 0.039652966f, 0.013009299f, -0.00073530525f, -0.029937685f, -0.015898889f, 0.017194541f, 0.041268878f, 0.03691164f, 0.0021090403f, -0.0044218805f, -0.0003518283f, 0.03208571f, 0.03872059f, -0.015585088f, -0.031691972f, -0.027204208f, -0.027799087f, -0.03140582f, -0.024144609f, -0.029131236f, -0.0006166679f, -0.010534395f, -0.053412274f, -0.026039477f, 0.02327985f, 0.002468529f, -0.015971841f, -0.03870977f, 0.0015068256f, 0.029168412f, 0.025979232f, -0.00014848322f, 0.023480166f, 0.022882162f, 0.1086864f, 0.04039409f, 0.04686041f, 0.030854652f, 0.0011865695f, 0.023846114f, 0.03404549f, 0.027745683f, -0.011852315f, 0.02592257f, 0.09672646f, 0.04493555f, -0.027386012f, -0.015208758f, -0.02407686f, 0.004940932f, 0.03843349f, 0.009353459f, -9.5053925e-05f, -0.034731977f, 0.011731949f, -0.082125075f, 0.034289576f, 0.046927046f, 0.036367156f, -0.020566383f, -0.011743045f, 0.005362335f, 0.014873384f, -0.041561183f, 0.027565314f, -0.047460195f, 0.028267229f, -0.02931979f, 0.043748844f, -0.008986446f, -0.036197904f, -0.0039762477f, 0.00384613f, 0.026702058f, -0.013507277f, -0.018546203f, -0.038978007f, 0.008370236f, -0.059048153f, -0.0088269655f, 0.030615881f, 0.061521176f, 0.040141247f, -0.042904384f, -0.0017646506f, -0.012129865f, -0.025165217f, -0.007414848f, -0.03211762f, 0.016645478f, -0.003678877f, 0.02817977f, 0.033541426f, -0.030827818f, 0.014391739f, -0.016986696f, -0.009304953f, 0.010068301f, 0.0012533539f, 0.054744214f, -0.03355412f, -0.0126412f, 0.006665331f, -0.051595133f, -0.026037361f, 0.024609802f, -0.03966661f, 0.08104592f, -0.011226513f, -0.04584874f, 0.055855907f, 0.024856847f, 0.04370813f, 0.00019327056f, -0.0014419332f, 0.02126272f, -0.015198758f, -0.028715013f, 0.1175778f, 0.0018902348f, 0.00060474704f, -0.018893233f, 0.014306088f, -0.0014934064f, 0.01141921f, 0.0011305047f, -0.04216744f, -0.022631632f, 0.021396926f, -0.0014329525f, -0.019445604f, 0.013686111f, 0.01649869f, 0.06171409f, -0.021276126f, 0.0263158f, 0.03875992f, -0.028981235f, 0.05266261f, 0.054521f, 0.037886284f, 0.044632472f, -0.05402573f, -0.05315056f, -0.010329648f, 0.0055773426f, -0.0045997864f, -0.025924252f, -0.0019360946f, -0.0008645076f, -0.03587916f, 0.0061763f, 0.036449447f, 0.01495319f, 0.012858187f, -0.007967018f, 0.039387755f, -0.013221118f, 0.0036750333f, -0.01904389f, -0.00033562203f, 0.011822021f, -0.007844666f, 0.010633819f, 0.031686552f, 0.013216273f, -0.06986176f, -0.0050058817f, 0.03312041f, -0.008020069f, -0.007771589f, -0.01182697f, 0.042453192f, -0.03915573f, 0.020194814f, -0.00954806f, 0.014636779f, -0.0020046192f, -0.023423301f, -0.030332584f, -0.0628702f, 0.0472391f, 0.012135565f, 0.026438866f, -0.01713713f, -0.023381876f, -0.13993254f, 0.029665118f, -0.036457572f, 0.011218912f, 0.038330603f, -0.056250863f, -0.03564765f, -0.023168502f, 0.06854669f, 0.01736419f, -0.005506834f, -0.023775242f, 0.0006358431f, 0.008166359f, -0.044492476f, -0.02230922f, -0.029222934f, 0.006484247f, -0.00048863835f, -0.037827164f, -0.026856521f, 0.03414912f, 0.006874869f, -0.012198071f, 0.00081886543f, 0.00741021f, -0.010242518f, -0.0132256355f, 0.015110306f, 0.0155827785f, 0.0049608652f, 0.011982397f, -0.0037450858f, -0.040991265f, 0.006001457f, -0.48184368f, -0.014675001f, -0.019399617f, -0.00050807477f, -0.020829525f, 0.010311649f, 0.0091862045f, -0.048885785f, 0.035956666f, 0.013535662f, -0.018462244f, 0.050372835f, -0.02836579f, 0.033545148f, -0.0005632335f, 0.007023988f, 0.044697817f, -0.002525599f, 0.025722712f, 0.019185606f, -0.031526912f, 0.031805854f, 0.03019657f, 0.011702875f, 0.0072402623f, 0.034088686f, -0.055395007f, 0.0133933285f, 0.010695204f, -0.022150824f, -0.009092343f, -0.020708743f, 0.014677717f, -0.02691326f, -0.041022483f, -0.010728332f, 0.05170642f, 0.009286708f, 0.010499943f, 0.010623252f, -0.007898877f, 0.026833422f, 0.020545354f, 0.0045525357f, 0.026015494f, 0.0013438065f, -0.008843245f, -0.03299382f, 0.0036264951f, 0.0631423f, -0.043489218f, -0.0067020636f, 0.08263549f, 0.02432318f, -0.0018398056f, -0.035592306f, 0.037945632f, 0.02471174f, 0.018099476f, 0.008289202f, 0.057471566f, -0.034602158f, -0.0030834016f, -0.077851646f, 0.000621722f, -0.010408296f, -0.01503258f, -0.021677738f, 0.035202455f, 0.02111145f, -0.059643175f, -0.008791222f, -0.0049411054f, -0.06235482f, 0.05213403f, -7.3968346e-05f, -0.042797476f, 0.025670705f, 0.031570684f, 0.005316893f, -0.036642972f, -0.045712292f, -0.031201003f, 0.0013435282f, -0.000494309f, -0.03169252f, -0.020528838f, 0.01809954f, -0.019055236f, 0.03645839f, 0.06659739f, -0.030998535f, -0.011546504f, 0.045022737f, 0.04093621f, 0.0534356f, 0.060189668f, -0.068081446f, -0.0048630824f, -0.022713043f, 0.028602442f, -0.043265317f, -0.04292418f, -0.021301687f, -0.012547421f, 0.0079896515f, -0.016087562f, 0.036705207f, 0.037259102f, -0.02395996f, -0.042752225f, 0.014155132f, -0.025802076f, -0.012854622f, 0.027047012f, 0.033388477f, -0.0072962856f, -0.030946407f, 0.010230067f, -0.031012211f, -0.018188275f, 0.029999569f, 0.012055036f, 0.020398764f, -0.013843629f, -0.039526306f, 0.020703869f, -0.0037418825f, -0.0052683037f, -0.017438497f, -0.02282057f, 0.0012672462f, 0.0018585115f, -0.012557607f, -0.010483216f, -0.019720279f, 0.019221477f, 0.04736351f, 0.005414666f, -0.057573926f, -0.0071921526f, -0.0001097653f, -0.027598547f, 0.027446415f, -0.008795139f, 0.001392441f, 0.0012335415f, -0.008592807f, -0.0432095f, 0.021367712f, -0.014368737f, -0.048905294f, 0.03449548f, 0.014495232f, -0.012759583f, 0.002067632f, 0.025151605f, 0.023311006f, 0.053315796f, -0.018494522f, 0.026421981f, -0.0087005105f, -0.096432306f, -0.0025691572f, 0.035672404f, -0.05256038f, -0.0069832117f, -0.01132947f, -0.019128852f, 0.047870636f, -0.017571028f, -0.00736777f, -0.02712124f, 0.0124487365f, 0.030766713f, -0.0071845357f, 0.013875514f, -0.0061107697f, -0.0118085835f, -0.0043757795f, 0.035335075f, -0.031514447f, 0.008930741f, 0.060583394f, 0.009514371f, -0.06121421f, -0.0059463717f, -0.014056502f, -0.00457576f, -0.018932668f, -0.0047621797f, 0.014372747f, 0.05434973f, -0.0069508883f, -0.018155267f, -0.01424335f, 0.01727908f, 0.015375504f, -0.0043006744f, -0.039005376f, 0.0011630051f, 0.030958423f, -0.0024497176f, 0.026296826f, 0.032621946f, -0.043037336f, -0.0062458026f, -0.0024066344f, -0.025261067f, -0.012876287f, 0.004674665f, -0.062701315f, -0.036242086f, -0.015491459f, -0.033093378f, -0.003791472f, 0.003521233f, 0.015312638f, -0.018087002f, 0.0007275054f, -0.025592119f, -0.033027202f, 0.0040619876f, -0.0049337046f, 0.012276444f, 0.028485294f, -0.0022711728f, -0.037957348f, 0.026373198f, 0.011347564f, 0.02729493f, -0.012358346f, 0.0038525765f, 0.045374937f, -0.021545382f, -0.015508571f, -0.011422388f, 0.030073423f, -0.035008345f, -0.045318596f, 0.030025236f, 0.027738895f, -0.010382076f, 0.0018489916f, -0.051705457f, -0.00014905288f, -0.01871698f, -0.026817072f, -0.065421715f, -0.009121612f, 0.020758322f, -0.01539622f, -0.0025403304f, -0.058611013f, 0.03054597f, 0.021318326f, 0.0027275842f, -0.020702f, -0.004794398f, 0.019018736f, -0.012444672f, -0.019887973f, -0.022113265f, 0.023049643f, -0.014587576f, 0.014351464f, 0.029817551f, -0.0609792f, 0.042052478f, -0.055451162f, -0.034356594f, -0.047547698f, -0.01826999f, 0.040954057f, 0.002969797f, -0.056506813f, -0.0073451693f, -0.02482f, 0.03168265f, 0.015525525f, 0.07468302f, 0.01469982f, 0.00210511f, -0.019698266f, -0.00031182918f, -0.019210724f, 0.041207567f, 0.0053758505f, 0.009472572f, 0.03771915f, -0.06461313f, 0.04082511f, -0.008058872f, 0.0012331214f, 0.0069069173f, 0.0024821213f, 0.006390242f, 0.0011468151f, -0.038794484f, -0.063377164f, -0.014241851f, 0.04237302f, 0.06795088f, -0.023934761f, -0.020242302f, 0.02311365f, -0.012824183f, 0.03533031f, -0.008410466f, 0.02789391f, -0.013549344f, 0.022365555f, 0.025989164f, 0.04313728f, -0.028337618f, 0.026092393f, 0.024711346f, -0.052706428f, 0.005730622f, 0.022862181f, -0.0076183174f, -0.037243042f, 0.052232295f, -0.016049191f, -0.06881278f, 0.031964153f, -0.021035925f, 0.0138404025f, -0.0013810501f, 0.016167158f, 0.034111433f, 0.07161581f, -0.025092546f, -0.04386276f, -0.0040376517f, -0.025154384f, 0.03385207f, 0.015494304f, 0.0048881858f, 0.016264858f, 0.061570168f, 0.029936614f, -0.01829368f, -0.0037140124f, -0.02359431f, 0.023544896f, 0.020937245f, -0.0061871763f, -0.045603115f, 0.053354852f, 0.040365223f, 0.01763893f, -0.020082904f, 0.0067172833f, 0.008561443f, 0.00088409515f, 0.0058731064f, -0.016091827f, 0.021013025f, -0.080045305f, 0.051248446f, 0.051069897f, -0.020342922f, 0.003785443f, -0.023021897f, 0.018125402f, 0.053128835f, 0.007378299f, 0.0270741f, 0.02051721f, -0.038264796f, 0.027366923f, -0.021771278f, 0.027172359f, -0.01405901f, -0.025535831f, -0.026873125f, 0.025676413f, -0.034890138f, 0.009825487f, -0.000653567f, -0.0041931183f, -0.03914068f, -0.012084683f, 0.021727156f, 0.026943136f, -0.024454104f, 0.014687368f, -0.036083054f, 0.0052459547f, -0.033593263f, -0.037296012f, -0.00528183f, 0.024822053f, -0.032910015f, 0.013125118f, -0.019655148f, 0.050365735f, 0.0025480876f, 0.011558444f, 0.02348081f, 0.0059274384f, 0.021103512f, 0.025836773f, -0.011869778f, 0.024600193f, -0.0393065f, -0.018619377f, -0.03744179f, -0.026498258f, 0.027013863f, 0.039253354f, -0.008169781f, -0.009831139f, -0.002388968f, 0.04232686f, 0.010924937f, -0.034946863f, 0.0039843144f, 0.014260961f, -0.06428069f, -0.03166362f, 0.024884656f, 0.027559036f, 0.0057664f, 0.007130555f, 0.029336175f, 0.016878324f, -0.02320544f, 0.021938594f, 0.008355895f, -0.007115111f, -0.023438789f, 0.03528865f, -0.009152654f, -0.008653632f, 0.0082724f, -0.0025690612f, 0.03129816f, -0.007876752f, -0.017509712f, 0.024677664f, 0.0370758f, 0.021148562f, -0.27696472f, 0.0028338798f, -0.014097512f, -0.019267568f, -0.03345135f, 0.006941969f, 0.010284976f, 0.0012813237f, -0.007259589f, 0.006475924f, 0.012507553f, 0.033468552f, 0.025855746f, -0.03161831f, 0.0067092087f, 0.034458436f));
        row3.put("link", "https://medium.com/swlh/how-can-we-best-switch-in-python-458fb33f7835");
        row3.put("reading_time", 6L);
        row3.put("publication", "The Startup");
        row3.put("claps", 500L);
        row3.put("responses", 7L);   

        rows2.add(row1);
        rows2.add(row2);
        rows2.add(row3);   
        
        // Empty the collection

        DeleteIdsParam emptyColParam = DeleteIdsParam.newBuilder()
                .withCollectionName(collectionName)
                .withPrimaryIds(insertedIds)
                .build();

        R<DeleteResponse> emptyColRes = client.delete(emptyColParam);

        if (emptyColRes.getException() != null) {
            System.err.println("Failed to delete: " + emptyColRes.getException().getMessage());
            return;
        }

        System.out.println("Successfully deleted " + emptyColRes.getData().toString() + " records");

        // Output:
        // Successfully deleted DeleteResponse(deleteIds=[]) records





        
        // for the sake of searches in this example, we need to add more records
        // to the collection. The following snippet reads data from a file and adds
        // it to the collection. 

        String content;

        Path file = Path.of(data_file);
        try {
            content = Files.readString(file);
        } catch (Exception e) {
            System.err.println("Failed to read file: " + e.getMessage());
            return;
        }

        // Load dataset
        JSONObject dataset = JSON.parseObject(content);

        // Change the counts argument to limit the rows.
        List<JSONObject> rows = getRows(dataset.getJSONArray("rows"), 200);

        InsertParam insertRowsParam2 = InsertParam.newBuilder()
            .withCollectionName(collectionName)
            // hightlight-next-line
            .withPartitionName(partitionName)
            .withRows(rows)
            .build();

        R<MutationResult> insertRes2 = client.insert(insertRowsParam2);

        if (res.getException() != null) {
            System.err.println("Failed to insert: " + insertRes.getException().getMessage());
            return;
        }

        Long insertCount2 = insertRes2.getData().getInsertCnt();
        List<Integer> insertedIds2 = insertRes2.getData().getSuccIndexList();

        System.out.println("Successfully inserted " + insertCount2 + " records");

        // Output:
        // Successfully inserted 200 records





        System.out.println(insertedIds2);

        // Output:
        // [
        //     0,
        //     1,
        //     2,
        //     3,
        //     4,
        //     5,
        //     6,
        //     7,
        //     8,
        //     9,
        //     "(190 elements are hidden)"
        // ]





        try {
            // pause execution for 5 seconds
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            // handle the exception
            Thread.currentThread().interrupt();
        }  

        // 10. Conduct a single-vector search

        List<List<Float>> queryVectors = new ArrayList<>();
        List<Float> queryVector1 = Lists.newArrayList(0.041732933f, 0.013779674f, -0.027564144f, -0.013061441f, 0.009748648f, 0.00082446384f, -0.00071647146f, 0.048612226f, -0.04836573f, -0.04567751f, 0.018008126f, 0.0063936645f, -0.011913628f, 0.030776596f, -0.018274948f, 0.019929802f, 0.020547243f, 0.032735646f, -0.031652678f, -0.033816382f, -0.051087562f, -0.033748355f, 0.0039493158f, 0.009246126f, -0.060236514f, -0.017136049f, 0.028754413f, -0.008433934f, 0.011168004f, -0.012391256f, -0.011225835f, 0.031775184f, 0.002929508f, -0.007448661f, -0.005337719f, -0.010999258f, -0.01515909f, -0.005130484f, 0.0060212007f, 0.0034560722f, -0.022935811f, -0.04970116f, -0.0155887455f, 0.06627353f, -0.006052789f, -0.051570725f, -0.109865054f, 0.033205193f, 0.00041118253f, 0.0029823708f, 0.036160238f, -0.011256539f, 0.00023560718f, 0.058322437f, 0.022275906f, 0.015206677f, -0.02884609f, 0.0016338055f, 0.0049200393f, 0.014388571f, -0.0049061654f, -0.04664761f, -0.027454877f, 0.017526226f, -0.005100602f, 0.018090058f, 0.02700998f, 0.04031944f, -0.0097965f, -0.03674761f, -0.0043163053f, -0.023320708f, 0.012654851f, -0.014262311f, -0.008081833f, -0.018334744f, 0.0014025003f, -0.003053399f, -0.002636383f, -0.022398386f, -0.004725274f, 0.00036367847f, -0.012368711f, 0.0014739085f, 0.03450414f, 0.009684024f, 0.017912658f, 0.06594397f, 0.021381201f, 0.029343689f, -0.0069561847f, 0.026152428f, 0.04635037f, 0.014746184f, -0.002119602f, 0.034359712f, -0.013705124f, 0.010691518f, 0.04060854f, 0.013679299f, -0.018990282f, 0.035340093f, 0.007353945f, -0.035990074f, 0.013126987f, -0.032933377f, -0.001756877f, -0.0049658176f, -0.03380879f, -0.07024137f, -0.0130426735f, 0.010533265f, -0.023091802f, -0.004645729f, -0.03344451f, 0.04759929f, 0.025985204f, -0.040710885f, -0.016681142f, -0.024664842f, -0.025170377f, 0.08839205f, -0.023733815f, 0.019494494f, 0.0055427826f, 0.045460507f, 0.07066554f, 0.022181382f, 0.018302314f, 0.026806992f, -0.006066003f, 0.046525814f, -0.04066389f, 0.019001767f, 0.021242762f, -0.020784091f, -0.031635042f, 0.04573943f, 0.02515421f, -0.050663553f, -0.05183343f, -0.046468202f, -0.07910535f, 0.017036669f, 0.021445233f, 0.04277428f, -0.020235524f, -0.055314954f, 0.00904601f, -0.01104365f, 0.03069203f, -0.00821997f, -0.035594665f, 0.024322856f, -0.0068963314f, 0.009003657f, 0.00398102f, -0.008596356f, 0.014772055f, 0.02740991f, 0.025503553f, 0.0038213644f, -0.0047855405f, -0.034888722f, 0.030553816f, -0.008325959f, 0.030010607f, 0.023729775f, 0.016138833f, -0.022967983f, -0.08616877f, -0.02460819f, -0.008210168f, -0.06444098f, 0.018750126f, -0.03335763f, 0.022024624f, 0.032374356f, 0.023870794f, 0.021288997f, -0.026617877f, 0.020435361f, -0.003692393f, -0.024113296f, 0.044870164f, -0.030451361f, 0.013022849f, 0.002278627f, -0.027616743f, -0.012087787f, -0.033232547f, -0.022974484f, 0.02801226f, -0.029057292f, 0.060317725f, -0.02312559f, 0.015558754f, 0.073630534f, 0.02490823f, -0.0140531305f, -0.043771528f, 0.040756326f, 0.01667925f, -0.0046050115f, -0.08938058f, 0.10560781f, 0.015044094f, 0.003613817f, 0.013523503f, -0.011039813f, 0.06396795f, 0.013428416f, -0.025031878f, -0.014972648f, -0.015970055f, 0.037022553f, -0.013759925f, 0.013363354f, 0.0039748577f, -0.0040822625f, 0.018209668f, -0.057496265f, 0.034993384f, 0.07075411f, 0.023498386f, 0.085871644f, 0.028646072f, 0.007590898f, 0.07037031f, -0.05005178f, 0.010477505f, -0.014106617f, 0.013402172f, 0.007472563f, -0.03131418f, 0.020552127f, -0.031878896f, -0.04170217f, -0.03153583f, 0.03458349f, 0.03366634f, 0.021306382f, -0.037176874f, 0.029069472f, 0.014662372f, 0.0024123765f, -0.025403008f, -0.0372993f, -0.049923114f, -0.014209514f, -0.015524425f, 0.036377322f, 0.04259327f, -0.029715618f, 0.02657093f, -0.0062432447f, -0.0024253451f, -0.021287171f, 0.010478781f, -0.029322306f, -0.021203341f, 0.047209084f, 0.025337176f, 0.018471811f, -0.008709492f, -0.047414266f, -0.06227469f, -0.05713435f, 0.02141101f, 0.024481304f, 0.07176469f, 0.0211379f, -0.049316987f, -0.124073654f, 0.0049275495f, -0.02461509f, -0.02738388f, 0.04825289f, -0.05069646f, 0.012640115f, -0.0061352802f, 0.034599125f, 0.02799496f, -0.01511028f, -0.046418104f, 0.011309801f, 0.016673129f, -0.033531003f, -0.049203333f, -0.027218347f, -0.03528408f, 0.008881575f, 0.010736325f, 0.034232814f, 0.012807507f, -0.0100207105f, 0.0067757815f, 0.009538357f, 0.026212366f, -0.036120333f, -0.019764563f, 0.006527411f, -0.016437015f, -0.009759148f, -0.042246807f, 0.012492151f, 0.0066206953f, 0.010672299f, -0.44499892f, -0.036189068f, -0.015703931f, -0.031111298f, -0.020329623f, 0.0047888453f, 0.090396516f, -0.041484866f, 0.033830352f, -0.0033847596f, 0.06065415f, 0.030880837f, 0.05558494f, 0.022805553f, 0.009607596f, 0.006682602f, 0.036806617f, 0.02406229f, 0.034229457f, -0.0105605405f, 0.034754273f, 0.02436426f, -0.03849325f, 0.021132406f, -0.01251386f, 0.022090863f, -0.029137045f, 0.0064384523f, -0.03175176f, -0.0070441505f, 0.016025176f, -0.023172623f, 0.00076795724f, -0.024106828f, -0.045440633f, -0.0074440194f, 0.00035374766f, 0.024374487f, 0.0058897804f, -0.012461025f, -0.029086761f, 0.0029477053f, -0.022914894f, -0.032369837f, 0.020743662f, 0.024116345f, 0.0020526652f, 0.0008596536f, -0.000583463f, 0.061080184f, 0.020812698f, -0.0235381f, 0.08112197f, 0.05689626f, -0.003070104f, -0.010714772f, -0.004864459f, 0.027089117f, -0.030910335f, 0.0017404438f, -0.014978656f, 0.0127020255f, 0.01878998f, -0.051732827f, -0.0037475713f, 0.013033434f, -0.023682894f, -0.03219574f, 0.03736345f, 0.0058930484f, -0.054040316f, 0.047637977f, 0.012636436f, -0.05820182f, 0.013828813f, -0.057893142f, -0.012405234f, 0.030266648f, -0.0029184038f, -0.021839319f, -0.045179468f, -0.013123978f, -0.021320488f, 0.0015718226f, 0.020244086f, -0.014414709f, 0.009535103f, -0.004497577f, -0.02577227f, -0.0085017495f, 0.029090486f, 0.009356506f, 0.0055838437f, 0.021151636f, 0.039531752f, 0.07814674f, 0.043186333f, -0.0077368533f, 0.028967595f, 0.025058193f, 0.05432941f, -0.04383656f, -0.027070394f, -0.080263995f, -0.03616516f, -0.026129462f, -0.0033627374f, 0.035040155f, 0.015231506f, -0.06372076f, 0.046391208f, 0.0049725454f, 0.003783345f, -0.057800908f, 0.061461f, -0.017880175f, 0.022820404f, 0.048944063f, 0.04725843f, -0.013392871f, 0.05023065f, 0.0069421427f, -0.019561166f, 0.012953843f, 0.06227977f, -0.02114757f, -0.003334329f, 0.023241237f, -0.061053444f, -0.023145229f, 0.016086273f, 0.0774039f, 0.008069459f, -0.0013532874f, -0.016790181f, -0.027246375f, -0.03254919f, 0.033754334f, 0.00037142826f, -0.02387325f, 0.0057056695f, 0.0084914565f, -0.051856343f, 0.029254f, 0.005583839f, 0.011591886f, -0.033027634f, -0.004170374f, 0.018334484f, -0.0030969654f, 0.0024489106f, 0.0030196267f, 0.023012564f, 0.020529047f, 0.00010772953f, 0.0017700809f, 0.029260442f, -0.018829526f, -0.024797931f, -0.039499596f, 0.008108761f, -0.013099816f, -0.11726566f, -0.005652353f, -0.008117937f, -0.012961832f, 0.0152542135f, -0.06429504f, 0.0184562f, 0.058997117f, -0.027178442f, -0.019294549f, -0.01587592f, 0.0048053437f, 0.043830805f, 0.011232237f, -0.026841154f, -0.0007282251f, -0.00862919f, -0.008405325f, 0.019370917f, -0.008112641f, -0.014931766f, 0.065622255f, 0.0149185015f, 0.013089685f, -0.0028022556f, -0.028629888f, -0.048105706f, 0.009296162f, 0.010251239f, 0.030800395f, 0.028263845f, -0.011021621f, -0.034127586f, 0.014709971f, -0.0075270324f, 0.010737263f, 0.020517904f, -0.012932179f, 0.007153817f, 0.03736311f, -0.03391106f, 0.03028614f, 0.012531187f, -0.046059456f, -0.0043963846f, 0.028799629f, -0.06663413f, -0.009447025f, -0.019833198f, -0.036111858f, -0.01901045f, 0.040701825f, 0.0060573653f, 0.027482377f, -0.019782187f, -0.020186251f, 0.028398912f, 0.027108852f, 0.026535714f, -0.000995191f, -0.020599326f, -0.005658084f, -0.017271476f, 0.026300041f, -0.006992451f, -0.08593853f, 0.03675959f, 0.0029454317f, -0.040927384f, -0.035480253f, 0.016498009f, -0.03406521f, -0.026182177f, -0.0007024827f, 0.019500641f, 0.0047998386f, -0.02416359f, 0.0019833131f, 0.0033488963f, 0.037788488f, -0.009154958f, -0.043469638f, -0.024896f, -0.017234193f, 0.044996973f, -0.06303135f, -0.051730774f, 0.04041444f, 0.0075959326f, -0.03901764f, -0.019851806f, -0.008242245f, 0.06107143f, 0.030118924f, -0.016167669f, -0.028161867f, -0.0025679746f, -0.021713274f, 0.025275888f, -0.012819265f, -0.036431268f, 0.017991759f, 0.040626206f, -0.0036572467f, -0.0005935883f, -0.0037468506f, 0.034460746f, -0.0182785f, -0.00431203f, -0.044755403f, 0.016463224f, 0.041199315f, -0.0093387f, 0.03919184f, -0.01151653f, -0.016965209f, 0.006347649f, 0.021104146f, 0.060276803f, -0.026659148f, 0.026461488f, -0.032700688f, 0.0012274865f, -0.024675943f, -0.003006079f, -0.009607032f, 0.010597691f, 0.0043017124f, -0.01908524f, 0.006748306f, -0.03049305f, -0.017481703f, 0.036747415f, 0.036634356f, 0.0007106319f, 0.045647435f, -0.020883067f, -0.0593661f, -0.03929885f, 0.042825453f, 0.016104022f, -0.03222858f, 0.031112716f, 0.020407677f, -0.013276762f, 0.03657825f, -0.033871554f, 0.004176301f, 0.009538976f, -0.009995692f, 0.0042660628f, 0.050545394f, -0.018142857f, 0.005219403f, 0.0006711967f, -0.014264284f, 0.031044828f, -0.01827481f, 0.012488852f, 0.031393733f, 0.050390214f, -0.014484084f, -0.054758117f, 0.055042055f, -0.005506624f, -0.0066648237f, 0.010891078f, 0.012446279f, 0.061687976f, 0.018091502f, 0.0026527622f, 0.0321537f, -0.02469515f, 0.01772019f, 0.006846163f, -0.07471038f, -0.024433741f, 0.02483875f, 0.0497063f, 0.0043456135f, 0.056550737f, 0.035752796f, -0.02430349f, 0.036570627f, -0.027576203f, -0.012418993f, 0.023442797f, -0.03433812f, 0.01953399f, -0.028003592f, -0.021168072f, 0.019414881f, -0.014712576f, -0.0003938545f, 0.021453558f, -0.023197332f, -0.004455581f, -0.08799191f, 0.0010808896f, 0.009281116f, -0.0051161298f, 0.031497046f, 0.034916095f, -0.023042161f, 0.030799815f, 0.017298799f, 0.0015253434f, 0.013728047f, 0.0035838438f, 0.016767647f, -0.022243451f, 0.013371096f, 0.053564783f, -0.008776885f, -0.013133307f, 0.015577713f, -0.027008705f, 0.009490815f, -0.04103532f, -0.012426461f, -0.0050485474f, -0.04323231f, -0.013291623f, -0.01660157f, -0.055480026f, 0.017622838f, 0.017476618f, -0.009798125f, 0.038226977f, -0.03127579f, 0.019329516f, 0.033461004f, -0.0039813113f, -0.039526325f, 0.03884973f, -0.011381027f, -0.023257744f, 0.03033401f, 0.0029607012f, -0.0006490531f, -0.0347344f, 0.029701462f, -0.04153701f, 0.028073426f, -0.025427297f, 0.009756264f, -0.048082624f, 0.021743972f, 0.057197016f, 0.024082556f, -0.013968224f, 0.044379756f, -0.029081704f, 0.003487999f, 0.042621125f, -0.04339743f, -0.027005397f, -0.02944044f, -0.024172144f, -0.07388652f, 0.05952364f, 0.02561452f, -0.010255158f, -0.015288555f, 0.045012463f, 0.012403602f, -0.021197597f, 0.025847573f, -0.016983166f, 0.03021369f, -0.02920852f, 0.035140667f, -0.010627725f, -0.020431923f, 0.03191218f, 0.0046844087f, 0.056356475f, -0.00012615003f, -0.0052536936f, -0.058609407f, 0.009710908f, 0.00041168949f, -0.22300485f, -0.0077232462f, 0.0029359192f, -0.028645728f, -0.021156758f, 0.029606635f, -0.026473567f, -0.0019432966f, 0.023867624f, 0.021946864f, -0.00082128344f, 0.01897284f, -0.017976845f, -0.015677344f, -0.0026336901f, 0.030096486f);
        queryVectors.add(queryVector1);

        List<String> outputFields = new ArrayList<>();
        outputFields.add("title");
        outputFields.add("link");

        List<String> partitionNames = new ArrayList<>();
        partitionNames.add(partitionName);

        SearchParam searchParam1 = SearchParam.newBuilder()
            .withCollectionName(collectionName)
            // hightlight-next-line
            .withPartitionNames(partitionNames)
            .withVectors(queryVectors)
            .withVectorFieldName("title_vector")
            .withMetricType(MetricType.L2)
            .withOutFields(outputFields)
            .withTopK(3)
            .build();

        R<SearchResults> searchRes = client.search(searchParam1);

        if (searchRes.getException() != null) {
            System.err.println("Failed to search: " + searchRes.getException().getMessage());
            return;
        }

        SearchResultsWrapper wrapper1 = new SearchResultsWrapper(searchRes.getData().getResults());

        List<List<JSONObject>> searchResults1 = new ArrayList<>();

        for (int i = 0; i < queryVectors.size(); ++i) {
            List<SearchResultsWrapper.IDScore> scores = wrapper1.getIDScore(i);
            List<String> titles = (List<String>) wrapper1.getFieldData("title", i);
            List<String> links = (List<String>) wrapper1.getFieldData("link", i);
            List<JSONObject> entities = new ArrayList<>();
            for (int j = 0; j < scores.size(); ++j) {
                SearchResultsWrapper.IDScore score = scores.get(j);
                JSONObject entity = new JSONObject();
                entity.put("id", score.getLongID());
                entity.put("distance", score.getScore());
                entity.put("title", titles.get(j));
                entity.put("link", links.get(j));
                entities.add(entity);
            }

            searchResults1.add(entities);
        } 

        System.out.println(searchResults1);

        // Output:
        // [[
        //     {
        //         "distance": 0,
        //         "link": "https://medium.com/swlh/the-reported-mortality-rate-of-coronavirus-is-not-important-369989c8d912",
        //         "id": 0,
        //         "title": "The Reported Mortality Rate of Coronavirus Is Not Important"
        //     },
        //     {
        //         "distance": 0.49484298,
        //         "link": "https://towardsdatascience.com/how-bad-will-the-coronavirus-outbreak-get-predicting-the-outbreak-figures-f0b8e8b61991",
        //         "id": 70,
        //         "title": "How bad will the Coronavirus Outbreak get? \u2014 Predicting the outbreak figures"
        //     },
        //     {
        //         "distance": 0.57358503,
        //         "link": "https://medium.com/swlh/the-funeral-industry-is-a-killer-1775118a7778",
        //         "id": 160,
        //         "title": "The Funeral Industry is a Killer"
        //     }
        // ]]





        // 11. Search multiple vectors in a collection

        List<Float> queryVector2 = rows.get(1).getJSONArray("title_vector").toJavaList(Float.class);
        queryVectors.add(queryVector2);


        SearchParam searchParam2 = SearchParam.newBuilder()
            .withCollectionName(collectionName)
            // highlight-next-line
            .withPartitionNames(partitionNames)
            .withVectorFieldName("title_vector")
            .withVectors(queryVectors)
            .withTopK(3)   
            .withMetricType(MetricType.L2)  
            .withParams("{\"nprobe\":1024}")
            .withConsistencyLevel(ConsistencyLevelEnum.BOUNDED)
            .withOutFields(outputFields)
            .build();

        R<SearchResults> response2 = client.search(searchParam2);

        SearchResultsWrapper wrapper2 = new SearchResultsWrapper(response2.getData().getResults());

        List<List<JSONObject>> results2 = new ArrayList<>();

        for (int i = 0; i < queryVectors.size(); ++i) {
            List<SearchResultsWrapper.IDScore> scores = wrapper2.getIDScore(i);
            List<String> titles = (List<String>) wrapper2.getFieldData("title", i);
            List<String> links = (List<String>) wrapper2.getFieldData("link", i);
            List<JSONObject> entities = new ArrayList<>();
            for (int j = 0; j < scores.size(); ++j) {
                SearchResultsWrapper.IDScore score = scores.get(j);
                JSONObject entity = new JSONObject();
                entity.put("id", score.getLongID());
                entity.put("distance", score.getScore());
                entity.put("title", titles.get(j));
                entity.put("link", links.get(j));
                entities.add(entity);
            }

            results2.add(entities);
        } 

        System.out.println(results2);

        // Output:
        // [
        //     [
        //         {
        //             "distance": 0,
        //             "link": "https://medium.com/swlh/the-reported-mortality-rate-of-coronavirus-is-not-important-369989c8d912",
        //             "id": 0,
        //             "title": "The Reported Mortality Rate of Coronavirus Is Not Important"
        //         },
        //         {
        //             "distance": 0.49484298,
        //             "link": "https://towardsdatascience.com/how-bad-will-the-coronavirus-outbreak-get-predicting-the-outbreak-figures-f0b8e8b61991",
        //             "id": 70,
        //             "title": "How bad will the Coronavirus Outbreak get? \u2014 Predicting the outbreak figures"
        //         },
        //         {
        //             "distance": 0.57358503,
        //             "link": "https://medium.com/swlh/the-funeral-industry-is-a-killer-1775118a7778",
        //             "id": 160,
        //             "title": "The Funeral Industry is a Killer"
        //         }
        //     ],
        //     [
        //         {
        //             "distance": 0,
        //             "link": "https://medium.com/swlh/dashboards-in-python-3-advanced-examples-for-dash-beginners-and-everyone-else-b1daf4e2ec0a",
        //             "id": 1,
        //             "title": "Dashboards in Python: 3 Advanced Examples for Dash Beginners and Everyone Else"
        //         },
        //         {
        //             "distance": 0.47489768,
        //             "link": "https://medium.com/swlh/python-nlp-tutorial-information-extraction-and-knowledge-graphs-43a2a4c4556c",
        //             "id": 4,
        //             "title": "Python NLP Tutorial: Information Extraction and Knowledge Graphs"
        //         },
        //         {
        //             "distance": 0.48493075,
        //             "link": "https://medium.com/swlh/how-to-use-web-sockets-socket-io-with-digital-ocean-load-balancers-and-kubernetes-dok8s-with-e4dd5531c67e",
        //             "id": 155,
        //             "title": "How To Use Web Sockets (Socket IO) With Digital Ocean Load Balancers And Kubernetes (DOK8S) With Ingress Nginx"
        //         }
        //     ]
        // ]





        // 12. Conduct a query on scalar fields

        outputFields.clear();
        outputFields.add("title");
        outputFields.add("publication");
        outputFields.add("claps");
        outputFields.add("responses");
        outputFields.add("reading_time");

        QueryParam queryParam = QueryParam.newBuilder()
            .withCollectionName(collectionName)
            .withExpr("(publication == \"Towards Data Science\") and ((claps > 1500 and responses > 15) or (10 < reading_time < 15))")
            .withOutFields(outputFields)
            .withLimit(3L)
            .build();
        
        R<QueryResults> queryResponse = client.query(queryParam);

        QueryResultsWrapper queryResultsWrapper = new QueryResultsWrapper(queryResponse.getData());

        List<List<JSONObject>> queryResults = new ArrayList<>();

        List<Long> ids = (List<Long>) queryResultsWrapper.getFieldWrapper("id").getFieldData();
        List<String> titles = (List<String>) queryResultsWrapper.getFieldWrapper("title").getFieldData();
        List<String> publications = (List<String>) queryResultsWrapper.getFieldWrapper("publication").getFieldData();
        List<Long> readingTimes = (List<Long>) queryResultsWrapper.getFieldWrapper("reading_time").getFieldData();
        List<Long> claps_ = (List<Long>) queryResultsWrapper.getFieldWrapper("claps").getFieldData();
        List<Long> responses_ = (List<Long>) queryResultsWrapper.getFieldWrapper("responses").getFieldData();
        List<JSONObject> entities = new ArrayList<>();
        for (int j = 0; j < ids.size(); ++j) {
            JSONObject entity = new JSONObject();
            entity.put("id", ids.get(j));
            entity.put("title", titles.get(j));
            entity.put("publication", publications.get(j));
            entity.put("reading_time", readingTimes.get(j));
            entity.put("claps", claps_.get(j));
            entity.put("responses", responses_.get(j));
            entities.add(entity);
        }

        queryResults.add(entities);

        System.out.println(queryResults);

        // Output:
        // [[
        //     {
        //         "reading_time": 21,
        //         "publication": "Towards Data Science",
        //         "responses": 18,
        //         "id": 69,
        //         "title": "Top 10 In-Demand programming languages to learn in 2020",
        //         "claps": 3000
        //     },
        //     {
        //         "reading_time": 12,
        //         "publication": "Towards Data Science",
        //         "responses": 7,
        //         "id": 73,
        //         "title": "Data Cleaning in Python: the Ultimate Guide (2020)",
        //         "claps": 1500
        //     },
        //     {
        //         "reading_time": 11,
        //         "publication": "Towards Data Science",
        //         "responses": 0,
        //         "id": 75,
        //         "title": "Top Trends of Graph Machine Learning in 2020",
        //         "claps": 1100
        //     }
        // ]]




        // 12. Release the partition

        partitionNames.clear();
        partitionNames.add(partitionName);

        ReleasePartitionsParam releasePartitionsParam = ReleasePartitionsParam.newBuilder()
            .withCollectionName(collectionName)
            .withPartitionNames(partitionNames)
            .build();

        R<RpcStatus> releasePartitionsRes = client.releasePartitions(releasePartitionsParam);

        if (releasePartitionsRes.getException() != null) {
            System.err.println("Failed to release partitions: " + releasePartitionsRes.getException().getMessage());
            return;
        }

        // 13. Drop the partition

        partitionNames.clear();
        partitionNames.add(partitionName);

        DropPartitionParam dropPartitionsParam = DropPartitionParam.newBuilder()
            .withCollectionName(collectionName)
            .withPartitionName(partitionName)
            .build();

        R<RpcStatus> dropPartitionsRes = client.dropPartition(dropPartitionsParam);

        if (dropPartitionsRes.getException() != null) {
            System.err.println("Failed to drop partitions: " + dropPartitionsRes.getException().getMessage());
            return;
        }

        // 14. Drop the collection

        DropCollectionParam dropColParam = DropCollectionParam.newBuilder()
                .withCollectionName(collectionName)
                .build();

        R<RpcStatus> dropColRes = client.dropCollection(dropColParam);

        if (dropColRes.getException() != null) {
            System.err.println("Failed to drop collection: " + dropColRes.getException().getMessage());
            return;
        }

        System.out.println("Successfully dropped collection " + collectionName);

        // Output:
        // Successfully dropped collection medium_articles





    }

    public static List<JSONObject> getRows(JSONArray dataset, int counts) {
        List<JSONObject> rows = new ArrayList<JSONObject>();
        for (int i = 0; i < counts; i++) {
            JSONObject json_row = new JSONObject(1, true);
            JSONObject original_row = dataset.getJSONObject(i);
            
            Long id = original_row.getLong("id");
            String title = original_row.getString("title");
            String link = original_row.getString("link");
            String publication = original_row.getString("publication");
            Long reading_time = original_row.getLong("reading_time");
            Long claps = original_row.getLong("claps");
            Long responses = original_row.getLong("responses");
            List<Float> vectors = original_row.getJSONArray("title_vector").toJavaList(Float.class);
    
            json_row.put("id", id);
            json_row.put("link", link);
            json_row.put("publication", publication);
            json_row.put("reading_time", reading_time);
            json_row.put("claps", claps);
            json_row.put("responses", responses);
            json_row.put("title", title);
            json_row.put("title_vector", vectors);
            rows.add(json_row);
        }
        return rows;
    }
}